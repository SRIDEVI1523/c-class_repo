stages:
    - pre-merge
    - post-merge
    - release

c-class:
    stage: post-merge
    except:
        - schedules
    script:
        - echo -e "section_start:`date +%s`:source_tools\r\e[0KSetup Initialization"
        - source /tools/setup.sh
        - python -m configure.main -ispec sample_config/default.yaml
        - make restore
        - echo -e "section_end:`date +%s`:source_tools\r\e[0Ksection_start:`date +%s`:generate_verilog\r\e[0KGenerate Verilog and Verilate"
        - make
        - echo -e "section_end:`date +%s`:generate_verilog\r\e[0Ksection_start:`date +%s`:riscv-test\r\e[0KRISC-V Tests Regression"
        - make regress opts='--filter=rv64 --parallel=50 --test_opts='--timeout=120s' --sub' CONFIG_ISA=RV64IMAFDC
        - make regress opts='--filter=rv64 --final'
        - make clean_verif
        - echo -e "section_end:`date +%s`:riscv-test\r\e[0Ksection_start:`date +%s`:aapg\r\e[0KAAPG Regression"
        - make aapg opts='--config=rv64imafdc* --test_count=10 --parallel=30' CONFIG_ISA=RV64IMAFDC
        - make regress opts='--list=aapg.list --sub --test_opts='--timeout=15m' --parallel=30' CONFIG_ISA=RV64IMAFDC
        - make regress opts='--list=aapg.list --final' CONFIG_ISA=RV64IMAFDC
        - make clean_verif
        - echo -e "section_end:`date +%s`:aapg\r\e[0Ksection_start:`date +%s`:csmith\r\e[0KCSMITH Regression"
        - make csmith opts='--test_count=30 --parallel=30' CONFIG_ISA=RV64IMAFDC
        - make regress opts='--list=csmith.list --parallel=30 --sub'  CONFIG_ISA=RV64IMAFDC
        - make regress opts='--list=csmith.list --final'
        - echo -e "section_end:`date +%s`:csmith\r\e[0Ksection_start:`date +%s`:benchmarks\r\e[0KBenchmarks Regression"
        - make regress opts="--list=cclass-benchmark-tests.list --sub --test_opts='--nospike --timeout=120s'" CONFIG_ISA=RV64IMAFDC
        - echo -e "section_end:`date +%s`:benchmarks\r\e[0Ksection_start:`date +%s`:cleanup\r\e[0KCleanup"
        - make clean_verif
        # - make torture opts='--config=bringup --test_count=1'
        # - make torture opts='--config=all --debug' CONFIG_ISA=RV64IMAFDC
        # - make regress opts='--list=riscv-torture.list --test_opts='--timeout=30m' --sub' CONFIG_ISA=RV64IMAFDC
        # - make regress opts='--list=riscv-torture.list --final'
        - make restore
        - python -m configure.main --clean
        - echo -e "section_end:`date +%s`:cleanup\r\e[0K"
    only:
        - master
    tags:
        - core-runner

check-mr-build:
    stage: pre-merge
    except:
        - schedules
    script:
        - echo -e "section_start:`date +%s`:source_tools\r\e[0KSetup Initialization"
        - source /tools/setup.sh
        - python -m configure.main --clean
        - python -m configure.main -ispec sample_config/default.yaml
        - echo -e "section_end:`date +%s`:source_tools\r\e[0Ksection_start:`date +%s`:generate_verilog\r\e[0KGenerate Verilog and Verilate"
        - make
        - echo -e "section_end:`date +%s`:generate_verilog\r\e[0Ksection_start:`date +%s`:sim_out\r\e[0KRISC-V Tests Regression"
        - make regress opts='--filter=rv64 --parallel=30 --test_opts='--timeout=120s' --sub' CONFIG_ISA=RV64IMAFDC
        - make regress opts='--filter=rv64 --final'
        - echo -e "section_end:`date +%s`:sim_out\r\e[0Ksection_start:`date +%s`:cleanup\r\e[0KCleanup"
        - make restore
        - python -m configure.main --clean
        - echo -e "section_end:`date +%s`:cleanup\r\e[0K"
    only:
        - merge_requests
    when: manual
    tags:
        - core-runner

# checks if the changelog has been updated and the version has also been upgraded
check-mr-compliance:
    stage: pre-merge
    except: 
        - schedules
    script:
        - export NEWVER=$(grep -P "^\[.*?\]" CHANGELOG.rst -m1 | awk '{print $1}' | sed 's/[][]//g');
        - export CURVER=$(git describe --tags| cut -f1 -d"-")
        - echo $NEWVER
        - echo $CURVER        
        - CURVER=${CURVER//./ }
        - NEWVER=${NEWVER//./ }
        - curpatch=$(echo $CURVER | awk '{print $3}')
        - curminor=$(echo $CURVER | awk '{print $2}')
        - curmajor=$(echo $CURVER | awk '{print $1}')
        - newpatch=$(echo $NEWVER | awk '{print $3}')
        - newminor=$(echo $NEWVER | awk '{print $2}')
        - newmajor=$(echo $NEWVER | awk '{print $1}')
        - if [ $newmajor = $curmajor ] && [ $newminor = $curminor ] && [ $newpatch -gt $curpatch ]; then echo "Patch Update Accepted OK"; exit 0; fi
        - if [ $newmajor = $curmajor ] && [ $newminor = $curminor ] && [ $newpatch -le $curpatch ]; then echo "Revise Patch Atleast!"; exit 1; fi
        - if [ $newmajor = $curmajor ] && [ $newminor -gt $curminor ] && [ $newpatch = 0 ]; then echo "Minor Update Accepted OK!"; exit 0; fi
        - if [ $newmajor = $curmajor ] && [ $newminor -gt $curminor ] && [ $newpatch != 0 ]; then echo "For Minor changes the patches should be 0"; exit 1; fi
        - if [ $newmajor = $curmajor ] && [ $newminor -lt $curminor ]; then echo "Minor version should greater than previuos"; exit 1; fi
        - if [ $newmajor -gt $curmajor ] && [ $newminor = 0 ] && [ $newpatch = 0 ]; then echo "Major Updated Accepted OK"; exit 0; fi
        - echo  "For Major updates Minor and Patches should be 0"
        - exit 1

    only:
        - merge_requests
    tags:
        - core-runner

release:
    stage: release
    script:
        - python3 /scratch/version-extract-rst.py
    only:
        refs:
            - master
    tags:
        - core-runner
    except:
        - schedules
